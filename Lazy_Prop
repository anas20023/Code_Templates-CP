const int MAX = 1e5 + 10;
int a[MAX];

struct node {
    int value = 0;
    int lazy = 0;
} tree[MAX * 4];

void build(int at, int L, int R) {
    tree[at].lazy = 0;
    if (L == R) {
        tree[at].value = a[L];
        return;
    }
    int mid = (L + R) / 2;
    int left = 2 * at;
    int right = 2 * at + 1;
    build(left, L, mid);
    build( right, mid + 1, R);
    tree[at].value += tree[left].value + tree[right].value;
}
//call it using build(1, 0, arraySize-1);


void update(int at, int L, int R, int l, int r, int val) {
    if (l > R || r < L) return;
    if (L >= l && R <= r) {
        tree[at].value += (R - L + 1) * val;
        tree[at].lazy += val;
        return;
    }
    int mid = (L + R) / 2;
    int left = at * 2;
    int right = at * 2 + 1;
    update(left, L, mid, l, r, val);
    update(right, mid + 1, R, l, r, val);
    tree[at].value = tree[left].value + tree[right].value + (R - L + 1) * tree[at].lazy;
}
//call it using update(1,0,arraySize-1,l,r,val);

int query(int at, int L, int R, int l, int r, int carry) {
    if (l > R || r < L) return 0;
    if (L >= l && R <= r) {
        return tree[at].value + carry * (R - L + 1);
    }
    int mid = (L + R) / 2;
    int left = at * 2;
    int right = at * 2 + 1;
    int carryValue = carry + tree[at].lazy;
    int x = query(left, L, mid, l, r, carryValue);
    int y = query(right, mid + 1, R, l, r, carryValue);
    return x + y;
}
//call it using query(1,0,arraySize-1,l,r,0);
